{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./NotificationsEmitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":151,"index":202}}],"key":"Qab5cB8LewiAQY57MV0vxh0VKT8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useLastNotificationResponse;\n  exports.determineNextResponse = void 0;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _NotificationsEmitter = require(_dependencyMap[1], \"./NotificationsEmitter\");\n  /**\n   * A React hook which returns the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n   *\n   * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n   *\n   * @return The hook may return one of these three types/values:\n   * - `undefined` - until we're sure of what to return,\n   * - `null` - if no notification response has been received yet,\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n   *\n   * @example\n   * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n   * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n   * ```jsx\n   * import * as Notifications from 'expo-notifications';\n   * import { Linking } from 'react-native';\n   *\n   * export default function App() {\n   *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n   *   React.useEffect(() => {\n   *     if (\n   *       lastNotificationResponse &&\n   *       lastNotificationResponse.notification.request.content.data.url &&\n   *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n   *     ) {\n   *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n   *     }\n   *   }, [lastNotificationResponse]);\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function useLastNotificationResponse() {\n    const [lastNotificationResponse, setLastNotificationResponse] = (0, _react.useState)(undefined);\n    // useLayoutEffect ensures the listener is registered as soon as possible\n    (0, _react.useLayoutEffect)(() => {\n      // Get the last response first, in case it was set earlier (even in native code on startup)\n      const response = (0, _NotificationsEmitter.getLastNotificationResponse)();\n      setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response));\n      // Set up listener for responses that come in, and set the last response if needed\n      const subscription = (0, _NotificationsEmitter.addNotificationResponseReceivedListener)(response => setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response)));\n      const clearResponseSubscription = (0, _NotificationsEmitter.addNotificationResponseClearedListener)(() => {\n        setLastNotificationResponse(null);\n      });\n      return () => {\n        subscription.remove();\n        clearResponseSubscription.remove();\n      };\n    }, []);\n    return lastNotificationResponse;\n  }\n  // returns the new response if it is different from the previous,\n  // also has to return undefined until we're sure of what to return (null or a response)\n  // the transition from response to null is invalid\n  const determineNextResponse = (prevResponse, newResponse) => {\n    if (!newResponse) {\n      return null;\n    }\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n  };\n  exports.determineNextResponse = determineNextResponse;\n});","lineCount":79,"map":[[7,2,1,0],[7,6,1,0,"_react"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_NotificationsEmitter"],[8,27,2,0],[8,30,2,0,"require"],[8,37,2,0],[8,38,2,0,"_dependencyMap"],[8,52,2,0],[9,2,3,0],[10,0,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,2,41,15],[47,11,41,24,"useLastNotificationResponse"],[47,38,41,51,"useLastNotificationResponse"],[47,39,41,51],[47,41,41,54],[48,4,42,4],[48,10,42,10],[48,11,42,11,"lastNotificationResponse"],[48,35,42,35],[48,37,42,37,"setLastNotificationResponse"],[48,64,42,64],[48,65,42,65],[48,68,42,68],[48,72,42,68,"useState"],[48,87,42,76],[48,89,42,77,"undefined"],[48,98,42,86],[48,99,42,87],[49,4,43,4],[50,4,44,4],[50,8,44,4,"useLayoutEffect"],[50,30,44,19],[50,32,44,20],[50,38,44,26],[51,6,45,8],[52,6,46,8],[52,12,46,14,"response"],[52,20,46,22],[52,23,46,25],[52,27,46,25,"getLastNotificationResponse"],[52,76,46,52],[52,78,46,53],[52,79,46,54],[53,6,47,8,"setLastNotificationResponse"],[53,33,47,35],[53,34,47,37,"prevResponse"],[53,46,47,49],[53,50,47,54,"determineNextResponse"],[53,71,47,75],[53,72,47,76,"prevResponse"],[53,84,47,88],[53,86,47,90,"response"],[53,94,47,98],[53,95,47,99],[53,96,47,100],[54,6,48,8],[55,6,49,8],[55,12,49,14,"subscription"],[55,24,49,26],[55,27,49,29],[55,31,49,29,"addNotificationResponseReceivedListener"],[55,92,49,68],[55,94,49,70,"response"],[55,102,49,78],[55,106,49,83,"setLastNotificationResponse"],[55,133,49,110],[55,134,49,112,"prevResponse"],[55,146,49,124],[55,150,49,129,"determineNextResponse"],[55,171,49,150],[55,172,49,151,"prevResponse"],[55,184,49,163],[55,186,49,165,"response"],[55,194,49,173],[55,195,49,174],[55,196,49,175],[55,197,49,176],[56,6,50,8],[56,12,50,14,"clearResponseSubscription"],[56,37,50,39],[56,40,50,42],[56,44,50,42,"addNotificationResponseClearedListener"],[56,104,50,80],[56,106,50,81],[56,112,50,87],[57,8,51,12,"setLastNotificationResponse"],[57,35,51,39],[57,36,51,40],[57,40,51,44],[57,41,51,45],[58,6,52,8],[58,7,52,9],[58,8,52,10],[59,6,53,8],[59,13,53,15],[59,19,53,21],[60,8,54,12,"subscription"],[60,20,54,24],[60,21,54,25,"remove"],[60,27,54,31],[60,28,54,32],[60,29,54,33],[61,8,55,12,"clearResponseSubscription"],[61,33,55,37],[61,34,55,38,"remove"],[61,40,55,44],[61,41,55,45],[61,42,55,46],[62,6,56,8],[62,7,56,9],[63,4,57,4],[63,5,57,5],[63,7,57,7],[63,9,57,9],[63,10,57,10],[64,4,58,4],[64,11,58,11,"lastNotificationResponse"],[64,35,58,35],[65,2,59,0],[66,2,60,0],[67,2,61,0],[68,2,62,0],[69,2,63,7],[69,8,63,13,"determineNextResponse"],[69,29,63,34],[69,32,63,37,"determineNextResponse"],[69,33,63,38,"prevResponse"],[69,45,63,50],[69,47,63,52,"newResponse"],[69,58,63,63],[69,63,63,68],[70,4,64,4],[70,8,64,8],[70,9,64,9,"newResponse"],[70,20,64,20],[70,22,64,22],[71,6,65,8],[71,13,65,15],[71,17,65,19],[72,4,66,4],[73,4,67,4],[73,8,67,8],[73,9,67,9,"prevResponse"],[73,21,67,21],[73,23,67,23],[74,6,68,8],[74,13,68,15,"newResponse"],[74,24,68,26],[75,4,69,4],[76,4,70,4],[76,11,70,11,"prevResponse"],[76,23,70,23],[76,24,70,24,"notification"],[76,36,70,36],[76,37,70,37,"request"],[76,44,70,44],[76,45,70,45,"identifier"],[76,55,70,55],[76,60,71,8,"newResponse"],[76,71,71,19],[76,72,71,20,"notification"],[76,84,71,32],[76,85,71,33,"request"],[76,92,71,40],[76,93,71,41,"identifier"],[76,103,71,51],[76,106,72,10,"newResponse"],[76,117,72,21],[76,120,73,10,"prevResponse"],[76,132,73,22],[77,2,74,0],[77,3,74,1],[78,2,74,2,"exports"],[78,9,74,2],[78,10,74,2,"determineNextResponse"],[78,31,74,2],[78,34,74,2,"determineNextResponse"],[78,55,74,2],[79,0,74,2],[79,3]],"functionMap":{"names":["<global>","useLastNotificationResponse","useLayoutEffect$argument_0","setLastNotificationResponse$argument_0","addNotificationResponseReceivedListener$argument_0","addNotificationResponseClearedListener$argument_0","<anonymous>","determineNextResponse"],"mappings":"AAA;eCwC;oBCG;oCCG,+DD;qEEE,0CD,+DC,CF;iFGC;SHE;eIC;SJG;KDC;CDE;qCOI;CPW"}},"type":"js/module"}]}