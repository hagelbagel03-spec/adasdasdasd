{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./NotificationPermissionsModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":76,"index":143}}],"key":"6SWwSpV5tzsRVpboNIWZk+BSwhE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _NotificationPermissionsModule = _interopRequireDefault(require(_dependencyMap[2], \"./NotificationPermissionsModule\"));\n  /**\n   * Calling this function checks current permissions settings related to notifications.\n   * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n   * There is no user-facing effect of calling this.\n   * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n   * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n   * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n   * ```ts\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export async function allowsNotificationsAsync() {\n   *   const settings = await Notifications.getPermissionsAsync();\n   *   return (\n   *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n   *   );\n   * }\n   * ```\n   * @header permissions\n   */\n  async function getPermissionsAsync() {\n    if (!_NotificationPermissionsModule.default.getPermissionsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Notifications', 'getPermissionsAsync');\n    }\n    return await _NotificationPermissionsModule.default.getPermissionsAsync();\n  }\n  /**\n   * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n   * setting badge count and playing sounds**.\n   * @param permissions An object representing configuration for the request scope.\n   * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n   * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n   * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n   * ```ts\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export function requestPermissionsAsync() {\n   *   return Notifications.requestPermissionsAsync({\n   *     ios: {\n   *       allowAlert: true,\n   *       allowBadge: true,\n   *       allowSound: true,\n   *     },\n   *   });\n   * }\n   * ```\n   * @header permissions\n   */\n  async function requestPermissionsAsync(permissions) {\n    if (!_NotificationPermissionsModule.default.requestPermissionsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Notifications', 'requestPermissionsAsync');\n    }\n    const requestedPermissions = permissions ?? {\n      ios: {\n        allowAlert: true,\n        allowBadge: true,\n        allowSound: true\n      }\n    };\n    const requestedPlatformPermissions = requestedPermissions[_expoModulesCore.Platform.OS];\n    // TODO(@kitten): This never checks whether the configuration object is undefined\n    return await _NotificationPermissionsModule.default.requestPermissionsAsync(requestedPlatformPermissions);\n  }\n});","lineCount":72,"map":[[8,2,1,0],[8,6,1,0,"_expoModulesCore"],[8,22,1,0],[8,25,1,0,"require"],[8,32,1,0],[8,33,1,0,"_dependencyMap"],[8,47,1,0],[9,2,2,0],[9,6,2,0,"_NotificationPermissionsModule"],[9,36,2,0],[9,39,2,0,"_interopRequireDefault"],[9,61,2,0],[9,62,2,0,"require"],[9,69,2,0],[9,70,2,0,"_dependencyMap"],[9,84,2,0],[10,2,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,2,22,7],[29,17,22,22,"getPermissionsAsync"],[29,36,22,41,"getPermissionsAsync"],[29,37,22,41],[29,39,22,44],[30,4,23,4],[30,8,23,8],[30,9,23,9,"NotificationPermissionsModule"],[30,47,23,38],[30,48,23,39,"getPermissionsAsync"],[30,67,23,58],[30,69,23,60],[31,6,24,8],[31,12,24,14],[31,16,24,18,"UnavailabilityError"],[31,52,24,37],[31,53,24,38],[31,68,24,53],[31,70,24,55],[31,91,24,76],[31,92,24,77],[32,4,25,4],[33,4,26,4],[33,11,26,11],[33,17,26,17,"NotificationPermissionsModule"],[33,55,26,46],[33,56,26,47,"getPermissionsAsync"],[33,75,26,66],[33,76,26,67],[33,77,26,68],[34,2,27,0],[35,2,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,2,50,7],[57,17,50,22,"requestPermissionsAsync"],[57,40,50,45,"requestPermissionsAsync"],[57,41,50,46,"permissions"],[57,52,50,57],[57,54,50,59],[58,4,51,4],[58,8,51,8],[58,9,51,9,"NotificationPermissionsModule"],[58,47,51,38],[58,48,51,39,"requestPermissionsAsync"],[58,71,51,62],[58,73,51,64],[59,6,52,8],[59,12,52,14],[59,16,52,18,"UnavailabilityError"],[59,52,52,37],[59,53,52,38],[59,68,52,53],[59,70,52,55],[59,95,52,80],[59,96,52,81],[60,4,53,4],[61,4,54,4],[61,10,54,10,"requestedPermissions"],[61,30,54,30],[61,33,54,33,"permissions"],[61,44,54,44],[61,48,54,48],[62,6,55,8,"ios"],[62,9,55,11],[62,11,55,13],[63,8,56,12,"allowAlert"],[63,18,56,22],[63,20,56,24],[63,24,56,28],[64,8,57,12,"allowBadge"],[64,18,57,22],[64,20,57,24],[64,24,57,28],[65,8,58,12,"allowSound"],[65,18,58,22],[65,20,58,24],[66,6,59,8],[67,4,60,4],[67,5,60,5],[68,4,61,4],[68,10,61,10,"requestedPlatformPermissions"],[68,38,61,38],[68,41,61,41,"requestedPermissions"],[68,61,61,61],[68,62,61,62,"Platform"],[68,87,61,70],[68,88,61,71,"OS"],[68,90,61,73],[68,91,61,74],[69,4,62,4],[70,4,63,4],[70,11,63,11],[70,17,63,17,"NotificationPermissionsModule"],[70,55,63,46],[70,56,63,47,"requestPermissionsAsync"],[70,79,63,70],[70,80,63,71,"requestedPlatformPermissions"],[70,108,63,99],[70,109,63,100],[71,2,64,0],[72,0,64,1],[72,3]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync"],"mappings":"AAA;OCqB;CDK;OEuB;CFc"}},"type":"js/module"}]}