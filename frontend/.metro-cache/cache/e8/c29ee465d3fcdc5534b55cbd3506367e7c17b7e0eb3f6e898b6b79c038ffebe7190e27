{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/DeviceEventEmitter","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"oyzjoDTnmzvralkBUpVLTrRSEl0=","exportNames":["*"]}},{"name":"./Audio/RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":105},"end":{"line":3,"column":69,"index":174}}],"key":"PLZx+w+meD0mX+Vfg7jl8Oy4mG0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _DeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/DeviceEventEmitter\"));\n  var _RecordingConstants = require(_dependencyMap[4], \"./Audio/RecordingConstants\");\n  const _excluded = [\"uri\"];\n  async function getPermissionWithQueryAsync(name) {\n    if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n    try {\n      const {\n        state\n      } = await navigator.permissions.query({\n        name\n      });\n      switch (state) {\n        case 'granted':\n          return _expoModulesCore.PermissionStatus.GRANTED;\n        case 'denied':\n          return _expoModulesCore.PermissionStatus.DENIED;\n        default:\n          return _expoModulesCore.PermissionStatus.UNDETERMINED;\n      }\n    } catch {\n      // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n      return _expoModulesCore.PermissionStatus.UNDETERMINED;\n    }\n  }\n  function getUserMedia(constraints) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      return navigator.mediaDevices.getUserMedia(constraints);\n    }\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    // First get ahold of the legacy getUserMedia, if present\n    const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n      const error = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n    return new Promise((resolve, reject) => {\n      // TODO(@kitten): The types indicates that this is incorrect.\n      // Please check whether this is correct!\n      // @ts-expect-error: The `successCallback` doesn't match a `resolve` function\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  }\n  function getStatusFromMedia(media) {\n    if (!media) {\n      return {\n        isLoaded: false,\n        error: undefined\n      };\n    }\n    const isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n    const status = {\n      isLoaded: true,\n      uri: media.src,\n      progressUpdateIntervalMillis: 100,\n      //TODO: Bacon: Add interval between calls\n      durationMillis: media.duration * 1000,\n      positionMillis: media.currentTime * 1000,\n      // playableDurationMillis: media.buffered * 1000,\n      // seekMillisToleranceBefore?: number\n      // seekMillisToleranceAfter?: number\n      shouldPlay: media.autoplay,\n      isPlaying,\n      isBuffering: false,\n      //media.waiting,\n      rate: media.playbackRate,\n      // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n      shouldCorrectPitch: false,\n      volume: media.volume,\n      audioPan: 0,\n      isMuted: media.muted,\n      isLooping: media.loop,\n      didJustFinish: media.ended\n    };\n    return status;\n  }\n  async function setStatusForMedia(media, status) {\n    if (status.positionMillis !== undefined) {\n      media.currentTime = status.positionMillis / 1000;\n    }\n    // if (status.progressUpdateIntervalMillis !== undefined) {\n    //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n    // }\n    // if (status.seekMillisToleranceBefore !== undefined) {\n    //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n    // }\n    // if (status.seekMillisToleranceAfter !== undefined) {\n    //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n    // }\n    // if (status.shouldCorrectPitch !== undefined) {\n    //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n    // }\n    if (status.shouldPlay !== undefined) {\n      if (status.shouldPlay) {\n        await media.play();\n      } else {\n        await media.pause();\n      }\n    }\n    if (status.rate !== undefined) {\n      media.playbackRate = status.rate;\n    }\n    if (status.shouldCorrectPitch !== undefined) {\n      media.preservesPitch = status.shouldCorrectPitch;\n    }\n    if (status.volume !== undefined) {\n      media.volume = status.volume;\n    }\n    if (status.isMuted !== undefined) {\n      media.muted = status.isMuted;\n    }\n    if (status.isLooping !== undefined) {\n      media.loop = status.isLooping;\n    }\n    return getStatusFromMedia(media);\n  }\n  let mediaRecorder = null;\n  let mediaRecorderUptimeOfLastStartResume = 0;\n  let mediaRecorderDurationAlreadyRecorded = 0;\n  let mediaRecorderIsRecording = false;\n  function getAudioRecorderDurationMillis() {\n    let duration = mediaRecorderDurationAlreadyRecorded;\n    if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n      duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n    }\n    return duration;\n  }\n  var _default = exports.default = {\n    async getStatusForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForVideo(element, nativeSource, fullInitialStatus) {\n      return getStatusFromMedia(element);\n    },\n    async unloadForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async setStatusForVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replayVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Audio */\n    async setAudioMode() {},\n    async setAudioIsEnabled() {},\n    async getStatusForSound(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForSound(nativeSource, fullInitialStatus) {\n      const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      const media = new Audio(source);\n      media.ontimeupdate = () => {\n        _DeviceEventEmitter.default.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = () => {\n        _DeviceEventEmitter.default.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      const status = await setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    },\n    async unloadForSound(element) {\n      element.pause();\n      element.removeAttribute('src');\n      element.load();\n      return getStatusFromMedia(element);\n    },\n    async setStatusForSound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replaySound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Recording */\n    //   async setUnloadedCallbackForAndroidRecording() {},\n    async getAudioRecordingStatus() {\n      return {\n        canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n        isRecording: mediaRecorder?.state === 'recording',\n        isDoneRecording: false,\n        durationMillis: getAudioRecorderDurationMillis(),\n        uri: null\n      };\n    },\n    // TODO(@kitten): Needs to be typed\n    async prepareAudioRecorder(options) {\n      if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n        throw new Error('No media devices available');\n      }\n      mediaRecorderUptimeOfLastStartResume = 0;\n      mediaRecorderDurationAlreadyRecorded = 0;\n      const stream = await getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new window.MediaRecorder(stream, options?.web || _RecordingConstants.RecordingOptionsPresets.HIGH_QUALITY.web);\n      mediaRecorder.addEventListener('pause', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n      });\n      mediaRecorder.addEventListener('resume', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('start', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderDurationAlreadyRecorded = 0;\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('stop', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n        // Clears recording icon in Chrome tab\n        stream.getTracks().forEach(track => track.stop());\n      });\n      const _await$this$getAudioR = await this.getAudioRecordingStatus(),\n        status = (0, _objectWithoutPropertiesLoose2.default)(_await$this$getAudioR, _excluded);\n      return {\n        uri: null,\n        status\n      };\n    },\n    async startAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n      } else {\n        mediaRecorder.start();\n      }\n      return this.getAudioRecordingStatus();\n    },\n    async pauseAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      // Set status to paused\n      mediaRecorder.pause();\n      return this.getAudioRecordingStatus();\n    },\n    async stopAudioRecording() {\n      const _mediaRecorder = mediaRecorder;\n      if (_mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (_mediaRecorder.state === 'inactive') {\n        return this.getAudioRecordingStatus();\n      }\n      const dataPromise = new Promise(resolve => _mediaRecorder.addEventListener('dataavailable', e => resolve(e.data)));\n      _mediaRecorder.stop();\n      const data = await dataPromise;\n      const url = URL.createObjectURL(data);\n      return Object.assign({}, await this.getAudioRecordingStatus(), {\n        uri: url\n      });\n    },\n    async unloadAudioRecorder() {\n      mediaRecorder = null;\n    },\n    async getPermissionsAsync() {\n      const maybeStatus = await getPermissionWithQueryAsync('microphone');\n      switch (maybeStatus) {\n        case _expoModulesCore.PermissionStatus.GRANTED:\n          return {\n            status: _expoModulesCore.PermissionStatus.GRANTED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: true\n          };\n        case _expoModulesCore.PermissionStatus.DENIED:\n          return {\n            status: _expoModulesCore.PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false\n          };\n        default:\n          return await this.requestPermissionsAsync();\n      }\n    },\n    async requestPermissionsAsync() {\n      try {\n        const stream = await getUserMedia({\n          audio: true\n        });\n        stream.getTracks().forEach(track => track.stop());\n        return {\n          status: _expoModulesCore.PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      } catch {\n        return {\n          status: _expoModulesCore.PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      }\n    }\n  };\n});","lineCount":321,"map":[[8,2,1,0],[8,6,1,0,"_expoModulesCore"],[8,22,1,0],[8,25,1,0,"require"],[8,32,1,0],[8,33,1,0,"_dependencyMap"],[8,47,1,0],[9,2,1,53],[9,6,1,53,"_DeviceEventEmitter"],[9,25,1,53],[9,28,1,53,"_interopRequireDefault"],[9,50,1,53],[9,51,1,53,"require"],[9,58,1,53],[9,59,1,53,"_dependencyMap"],[9,73,1,53],[10,2,3,0],[10,6,3,0,"_RecordingConstants"],[10,25,3,0],[10,28,3,0,"require"],[10,35,3,0],[10,36,3,0,"_dependencyMap"],[10,50,3,0],[11,2,3,69],[11,8,3,69,"_excluded"],[11,17,3,69],[12,2,4,0],[12,17,4,15,"getPermissionWithQueryAsync"],[12,44,4,42,"getPermissionWithQueryAsync"],[12,45,4,43,"name"],[12,49,4,47],[12,51,4,49],[13,4,5,4],[13,8,5,8],[13,9,5,9,"navigator"],[13,18,5,18],[13,22,5,22],[13,23,5,23,"navigator"],[13,32,5,32],[13,33,5,33,"permissions"],[13,44,5,44],[13,48,5,48],[13,49,5,49,"navigator"],[13,58,5,58],[13,59,5,59,"permissions"],[13,70,5,70],[13,71,5,71,"query"],[13,76,5,76],[13,78,6,8],[13,85,6,15],[13,89,6,19],[14,4,7,4],[14,8,7,8],[15,6,8,8],[15,12,8,14],[16,8,8,16,"state"],[17,6,8,22],[17,7,8,23],[17,10,8,26],[17,16,8,32,"navigator"],[17,25,8,41],[17,26,8,42,"permissions"],[17,37,8,53],[17,38,8,54,"query"],[17,43,8,59],[17,44,8,60],[18,8,8,62,"name"],[19,6,8,67],[19,7,8,68],[19,8,8,69],[20,6,9,8],[20,14,9,16,"state"],[20,19,9,21],[21,8,10,12],[21,13,10,17],[21,22,10,26],[22,10,11,16],[22,17,11,23,"PermissionStatus"],[22,50,11,39],[22,51,11,40,"GRANTED"],[22,58,11,47],[23,8,12,12],[23,13,12,17],[23,21,12,25],[24,10,13,16],[24,17,13,23,"PermissionStatus"],[24,50,13,39],[24,51,13,40,"DENIED"],[24,57,13,46],[25,8,14,12],[26,10,15,16],[26,17,15,23,"PermissionStatus"],[26,50,15,39],[26,51,15,40,"UNDETERMINED"],[26,63,15,52],[27,6,16,8],[28,4,17,4],[28,5,17,5],[28,6,18,4],[28,12,18,10],[29,6,19,8],[30,6,20,8],[30,13,20,15,"PermissionStatus"],[30,46,20,31],[30,47,20,32,"UNDETERMINED"],[30,59,20,44],[31,4,21,4],[32,2,22,0],[33,2,23,0],[33,11,23,9,"getUserMedia"],[33,23,23,21,"getUserMedia"],[33,24,23,22,"constraints"],[33,35,23,33],[33,37,23,35],[34,4,24,4],[34,8,24,8,"navigator"],[34,17,24,17],[34,18,24,18,"mediaDevices"],[34,30,24,30],[34,34,24,34,"navigator"],[34,43,24,43],[34,44,24,44,"mediaDevices"],[34,56,24,56],[34,57,24,57,"getUserMedia"],[34,69,24,69],[34,71,24,71],[35,6,25,8],[35,13,25,15,"navigator"],[35,22,25,24],[35,23,25,25,"mediaDevices"],[35,35,25,37],[35,36,25,38,"getUserMedia"],[35,48,25,50],[35,49,25,51,"constraints"],[35,60,25,62],[35,61,25,63],[36,4,26,4],[37,4,27,4],[38,4,28,4],[39,4,29,4],[40,4,30,4],[41,4,31,4],[41,10,31,10,"getUserMedia"],[41,22,31,22],[42,4,32,4],[43,4,33,4,"navigator"],[43,13,33,13],[43,14,33,14,"getUserMedia"],[43,26,33,26],[43,30,34,8,"navigator"],[43,39,34,17],[43,40,34,18,"webkitGetUserMedia"],[43,58,34,36],[43,62,35,8,"navigator"],[43,71,35,17],[43,72,35,18,"mozGetUserMedia"],[43,87,35,33],[43,91,36,8],[43,103,36,20],[44,6,37,12],[44,12,37,18,"error"],[44,17,37,23],[44,20,37,26],[44,24,37,30,"Error"],[44,29,37,35],[44,30,37,36],[44,56,37,62],[44,57,37,63],[45,6,38,12,"error"],[45,11,38,17],[45,12,38,18,"code"],[45,16,38,22],[45,19,38,25],[45,20,38,26],[46,6,39,12,"error"],[46,11,39,17],[46,12,39,18,"name"],[46,16,39,22],[46,19,39,25],[46,36,39,42],[47,6,40,12],[47,12,40,18,"error"],[47,17,40,23],[48,4,41,8],[48,5,41,9],[49,4,42,4],[49,11,42,11],[49,15,42,15,"Promise"],[49,22,42,22],[49,23,42,23],[49,24,42,24,"resolve"],[49,31,42,31],[49,33,42,33,"reject"],[49,39,42,39],[49,44,42,44],[50,6,43,8],[51,6,44,8],[52,6,45,8],[53,6,46,8,"getUserMedia"],[53,18,46,20],[53,19,46,21,"call"],[53,23,46,25],[53,24,46,26,"navigator"],[53,33,46,35],[53,35,46,37,"constraints"],[53,46,46,48],[53,48,46,50,"resolve"],[53,55,46,57],[53,57,46,59,"reject"],[53,63,46,65],[53,64,46,66],[54,4,47,4],[54,5,47,5],[54,6,47,6],[55,2,48,0],[56,2,49,0],[56,11,49,9,"getStatusFromMedia"],[56,29,49,27,"getStatusFromMedia"],[56,30,49,28,"media"],[56,35,49,33],[56,37,49,35],[57,4,50,4],[57,8,50,8],[57,9,50,9,"media"],[57,14,50,14],[57,16,50,16],[58,6,51,8],[58,13,51,15],[59,8,52,12,"isLoaded"],[59,16,52,20],[59,18,52,22],[59,23,52,27],[60,8,53,12,"error"],[60,13,53,17],[60,15,53,19,"undefined"],[61,6,54,8],[61,7,54,9],[62,4,55,4],[63,4,56,4],[63,10,56,10,"isPlaying"],[63,19,56,19],[63,22,56,22],[63,23,56,23],[63,25,56,25,"media"],[63,30,56,30],[63,31,56,31,"currentTime"],[63,42,56,42],[63,45,56,45],[63,46,56,46],[63,50,57,8],[63,51,57,9,"media"],[63,56,57,14],[63,57,57,15,"paused"],[63,63,57,21],[63,67,58,8],[63,68,58,9,"media"],[63,73,58,14],[63,74,58,15,"ended"],[63,79,58,20],[63,83,59,8,"media"],[63,88,59,13],[63,89,59,14,"readyState"],[63,99,59,24],[63,102,59,27],[63,103,59,28],[63,104,59,29],[64,4,60,4],[64,10,60,10,"status"],[64,16,60,16],[64,19,60,19],[65,6,61,8,"isLoaded"],[65,14,61,16],[65,16,61,18],[65,20,61,22],[66,6,62,8,"uri"],[66,9,62,11],[66,11,62,13,"media"],[66,16,62,18],[66,17,62,19,"src"],[66,20,62,22],[67,6,63,8,"progressUpdateIntervalMillis"],[67,34,63,36],[67,36,63,38],[67,39,63,41],[68,6,63,43],[69,6,64,8,"durationMillis"],[69,20,64,22],[69,22,64,24,"media"],[69,27,64,29],[69,28,64,30,"duration"],[69,36,64,38],[69,39,64,41],[69,43,64,45],[70,6,65,8,"positionMillis"],[70,20,65,22],[70,22,65,24,"media"],[70,27,65,29],[70,28,65,30,"currentTime"],[70,39,65,41],[70,42,65,44],[70,46,65,48],[71,6,66,8],[72,6,67,8],[73,6,68,8],[74,6,69,8,"shouldPlay"],[74,16,69,18],[74,18,69,20,"media"],[74,23,69,25],[74,24,69,26,"autoplay"],[74,32,69,34],[75,6,70,8,"isPlaying"],[75,15,70,17],[76,6,71,8,"isBuffering"],[76,17,71,19],[76,19,71,21],[76,24,71,26],[77,6,71,28],[78,6,72,8,"rate"],[78,10,72,12],[78,12,72,14,"media"],[78,17,72,19],[78,18,72,20,"playbackRate"],[78,30,72,32],[79,6,73,8],[80,6,74,8,"shouldCorrectPitch"],[80,24,74,26],[80,26,74,28],[80,31,74,33],[81,6,75,8,"volume"],[81,12,75,14],[81,14,75,16,"media"],[81,19,75,21],[81,20,75,22,"volume"],[81,26,75,28],[82,6,76,8,"audioPan"],[82,14,76,16],[82,16,76,18],[82,17,76,19],[83,6,77,8,"isMuted"],[83,13,77,15],[83,15,77,17,"media"],[83,20,77,22],[83,21,77,23,"muted"],[83,26,77,28],[84,6,78,8,"isLooping"],[84,15,78,17],[84,17,78,19,"media"],[84,22,78,24],[84,23,78,25,"loop"],[84,27,78,29],[85,6,79,8,"didJustFinish"],[85,19,79,21],[85,21,79,23,"media"],[85,26,79,28],[85,27,79,29,"ended"],[86,4,80,4],[86,5,80,5],[87,4,81,4],[87,11,81,11,"status"],[87,17,81,17],[88,2,82,0],[89,2,83,0],[89,17,83,15,"setStatusForMedia"],[89,34,83,32,"setStatusForMedia"],[89,35,83,33,"media"],[89,40,83,38],[89,42,83,40,"status"],[89,48,83,46],[89,50,83,48],[90,4,84,4],[90,8,84,8,"status"],[90,14,84,14],[90,15,84,15,"positionMillis"],[90,29,84,29],[90,34,84,34,"undefined"],[90,43,84,43],[90,45,84,45],[91,6,85,8,"media"],[91,11,85,13],[91,12,85,14,"currentTime"],[91,23,85,25],[91,26,85,28,"status"],[91,32,85,34],[91,33,85,35,"positionMillis"],[91,47,85,49],[91,50,85,52],[91,54,85,56],[92,4,86,4],[93,4,87,4],[94,4,88,4],[95,4,89,4],[96,4,90,4],[97,4,91,4],[98,4,92,4],[99,4,93,4],[100,4,94,4],[101,4,95,4],[102,4,96,4],[103,4,97,4],[104,4,98,4],[105,4,99,4],[105,8,99,8,"status"],[105,14,99,14],[105,15,99,15,"shouldPlay"],[105,25,99,25],[105,30,99,30,"undefined"],[105,39,99,39],[105,41,99,41],[106,6,100,8],[106,10,100,12,"status"],[106,16,100,18],[106,17,100,19,"shouldPlay"],[106,27,100,29],[106,29,100,31],[107,8,101,12],[107,14,101,18,"media"],[107,19,101,23],[107,20,101,24,"play"],[107,24,101,28],[107,25,101,29],[107,26,101,30],[108,6,102,8],[108,7,102,9],[108,13,103,13],[109,8,104,12],[109,14,104,18,"media"],[109,19,104,23],[109,20,104,24,"pause"],[109,25,104,29],[109,26,104,30],[109,27,104,31],[110,6,105,8],[111,4,106,4],[112,4,107,4],[112,8,107,8,"status"],[112,14,107,14],[112,15,107,15,"rate"],[112,19,107,19],[112,24,107,24,"undefined"],[112,33,107,33],[112,35,107,35],[113,6,108,8,"media"],[113,11,108,13],[113,12,108,14,"playbackRate"],[113,24,108,26],[113,27,108,29,"status"],[113,33,108,35],[113,34,108,36,"rate"],[113,38,108,40],[114,4,109,4],[115,4,110,4],[115,8,110,8,"status"],[115,14,110,14],[115,15,110,15,"shouldCorrectPitch"],[115,33,110,33],[115,38,110,38,"undefined"],[115,47,110,47],[115,49,110,49],[116,6,111,8,"media"],[116,11,111,13],[116,12,111,14,"preservesPitch"],[116,26,111,28],[116,29,111,31,"status"],[116,35,111,37],[116,36,111,38,"shouldCorrectPitch"],[116,54,111,56],[117,4,112,4],[118,4,113,4],[118,8,113,8,"status"],[118,14,113,14],[118,15,113,15,"volume"],[118,21,113,21],[118,26,113,26,"undefined"],[118,35,113,35],[118,37,113,37],[119,6,114,8,"media"],[119,11,114,13],[119,12,114,14,"volume"],[119,18,114,20],[119,21,114,23,"status"],[119,27,114,29],[119,28,114,30,"volume"],[119,34,114,36],[120,4,115,4],[121,4,116,4],[121,8,116,8,"status"],[121,14,116,14],[121,15,116,15,"isMuted"],[121,22,116,22],[121,27,116,27,"undefined"],[121,36,116,36],[121,38,116,38],[122,6,117,8,"media"],[122,11,117,13],[122,12,117,14,"muted"],[122,17,117,19],[122,20,117,22,"status"],[122,26,117,28],[122,27,117,29,"isMuted"],[122,34,117,36],[123,4,118,4],[124,4,119,4],[124,8,119,8,"status"],[124,14,119,14],[124,15,119,15,"isLooping"],[124,24,119,24],[124,29,119,29,"undefined"],[124,38,119,38],[124,40,119,40],[125,6,120,8,"media"],[125,11,120,13],[125,12,120,14,"loop"],[125,16,120,18],[125,19,120,21,"status"],[125,25,120,27],[125,26,120,28,"isLooping"],[125,35,120,37],[126,4,121,4],[127,4,122,4],[127,11,122,11,"getStatusFromMedia"],[127,29,122,29],[127,30,122,30,"media"],[127,35,122,35],[127,36,122,36],[128,2,123,0],[129,2,124,0],[129,6,124,4,"mediaRecorder"],[129,19,124,17],[129,22,124,20],[129,26,124,24],[130,2,125,0],[130,6,125,4,"mediaRecorderUptimeOfLastStartResume"],[130,42,125,40],[130,45,125,43],[130,46,125,44],[131,2,126,0],[131,6,126,4,"mediaRecorderDurationAlreadyRecorded"],[131,42,126,40],[131,45,126,43],[131,46,126,44],[132,2,127,0],[132,6,127,4,"mediaRecorderIsRecording"],[132,30,127,28],[132,33,127,31],[132,38,127,36],[133,2,128,0],[133,11,128,9,"getAudioRecorderDurationMillis"],[133,41,128,39,"getAudioRecorderDurationMillis"],[133,42,128,39],[133,44,128,42],[134,4,129,4],[134,8,129,8,"duration"],[134,16,129,16],[134,19,129,19,"mediaRecorderDurationAlreadyRecorded"],[134,55,129,55],[135,4,130,4],[135,8,130,8,"mediaRecorderIsRecording"],[135,32,130,32],[135,36,130,36,"mediaRecorderUptimeOfLastStartResume"],[135,72,130,72],[135,75,130,75],[135,76,130,76],[135,78,130,78],[136,6,131,8,"duration"],[136,14,131,16],[136,18,131,20,"Date"],[136,22,131,24],[136,23,131,25,"now"],[136,26,131,28],[136,27,131,29],[136,28,131,30],[136,31,131,33,"mediaRecorderUptimeOfLastStartResume"],[136,67,131,69],[137,4,132,4],[138,4,133,4],[138,11,133,11,"duration"],[138,19,133,19],[139,2,134,0],[140,2,134,1],[140,6,134,1,"_default"],[140,14,134,1],[140,17,134,1,"exports"],[140,24,134,1],[140,25,134,1,"default"],[140,32,134,1],[140,35,135,15],[141,4,136,4],[141,10,136,10,"getStatusForVideo"],[141,27,136,27,"getStatusForVideo"],[141,28,136,28,"element"],[141,35,136,35],[141,37,136,37],[142,6,137,8],[142,13,137,15,"getStatusFromMedia"],[142,31,137,33],[142,32,137,34,"element"],[142,39,137,41],[142,40,137,42],[143,4,138,4],[143,5,138,5],[144,4,139,4],[144,10,139,10,"loadForVideo"],[144,22,139,22,"loadForVideo"],[144,23,139,23,"element"],[144,30,139,30],[144,32,139,32,"nativeSource"],[144,44,139,44],[144,46,139,46,"fullInitialStatus"],[144,63,139,63],[144,65,139,65],[145,6,140,8],[145,13,140,15,"getStatusFromMedia"],[145,31,140,33],[145,32,140,34,"element"],[145,39,140,41],[145,40,140,42],[146,4,141,4],[146,5,141,5],[147,4,142,4],[147,10,142,10,"unloadForVideo"],[147,24,142,24,"unloadForVideo"],[147,25,142,25,"element"],[147,32,142,32],[147,34,142,34],[148,6,143,8],[148,13,143,15,"getStatusFromMedia"],[148,31,143,33],[148,32,143,34,"element"],[148,39,143,41],[148,40,143,42],[149,4,144,4],[149,5,144,5],[150,4,145,4],[150,10,145,10,"setStatusForVideo"],[150,27,145,27,"setStatusForVideo"],[150,28,145,28,"element"],[150,35,145,35],[150,37,145,37,"status"],[150,43,145,43],[150,45,145,45],[151,6,146,8],[151,13,146,15,"setStatusForMedia"],[151,30,146,32],[151,31,146,33,"element"],[151,38,146,40],[151,40,146,42,"status"],[151,46,146,48],[151,47,146,49],[152,4,147,4],[152,5,147,5],[153,4,148,4],[153,10,148,10,"replayVideo"],[153,21,148,21,"replayVideo"],[153,22,148,22,"element"],[153,29,148,29],[153,31,148,31,"status"],[153,37,148,37],[153,39,148,39],[154,6,149,8],[154,13,149,15,"setStatusForMedia"],[154,30,149,32],[154,31,149,33,"element"],[154,38,149,40],[154,40,149,42,"status"],[154,46,149,48],[154,47,149,49],[155,4,150,4],[155,5,150,5],[156,4,151,4],[157,4,152,4],[157,10,152,10,"setAudioMode"],[157,22,152,22,"setAudioMode"],[157,23,152,22],[157,25,152,25],[157,26,152,27],[157,27,152,28],[158,4,153,4],[158,10,153,10,"setAudioIsEnabled"],[158,27,153,27,"setAudioIsEnabled"],[158,28,153,27],[158,30,153,30],[158,31,153,32],[158,32,153,33],[159,4,154,4],[159,10,154,10,"getStatusForSound"],[159,27,154,27,"getStatusForSound"],[159,28,154,28,"element"],[159,35,154,35],[159,37,154,37],[160,6,155,8],[160,13,155,15,"getStatusFromMedia"],[160,31,155,33],[160,32,155,34,"element"],[160,39,155,41],[160,40,155,42],[161,4,156,4],[161,5,156,5],[162,4,157,4],[162,10,157,10,"loadForSound"],[162,22,157,22,"loadForSound"],[162,23,157,23,"nativeSource"],[162,35,157,35],[162,37,157,37,"fullInitialStatus"],[162,54,157,54],[162,56,157,56],[163,6,158,8],[163,12,158,14,"source"],[163,18,158,20],[163,21,158,23],[163,28,158,30,"nativeSource"],[163,40,158,42],[163,45,158,47],[163,53,158,55],[163,56,158,58,"nativeSource"],[163,68,158,70],[163,71,158,73,"nativeSource"],[163,83,158,85],[163,84,158,86,"uri"],[163,87,158,89],[164,6,159,8],[164,12,159,14,"media"],[164,17,159,19],[164,20,159,22],[164,24,159,26,"Audio"],[164,29,159,31],[164,30,159,32,"source"],[164,36,159,38],[164,37,159,39],[165,6,160,8,"media"],[165,11,160,13],[165,12,160,14,"ontimeupdate"],[165,24,160,26],[165,27,160,29],[165,33,160,35],[166,8,161,12,"DeviceEventEmitter"],[166,35,161,30],[166,36,161,31,"emit"],[166,40,161,35],[166,41,161,36],[166,66,161,61],[166,68,161,63],[167,10,162,16,"key"],[167,13,162,19],[167,15,162,21,"media"],[167,20,162,26],[168,10,163,16,"status"],[168,16,163,22],[168,18,163,24,"getStatusFromMedia"],[168,36,163,42],[168,37,163,43,"media"],[168,42,163,48],[169,8,164,12],[169,9,164,13],[169,10,164,14],[170,6,165,8],[170,7,165,9],[171,6,166,8,"media"],[171,11,166,13],[171,12,166,14,"onerror"],[171,19,166,21],[171,22,166,24],[171,28,166,30],[172,8,167,12,"DeviceEventEmitter"],[172,35,167,30],[172,36,167,31,"emit"],[172,40,167,35],[172,41,167,36],[172,61,167,56],[172,63,167,58],[173,10,168,16,"key"],[173,13,168,19],[173,15,168,21,"media"],[173,20,168,26],[174,10,169,16,"error"],[174,15,169,21],[174,17,169,23,"media"],[174,22,169,28],[174,23,169,29,"error"],[174,28,169,34],[174,29,169,35,"message"],[175,8,170,12],[175,9,170,13],[175,10,170,14],[176,6,171,8],[176,7,171,9],[177,6,172,8],[177,12,172,14,"status"],[177,18,172,20],[177,21,172,23],[177,27,172,29,"setStatusForMedia"],[177,44,172,46],[177,45,172,47,"media"],[177,50,172,52],[177,52,172,54,"fullInitialStatus"],[177,69,172,71],[177,70,172,72],[178,6,173,8],[178,13,173,15],[178,14,173,16,"media"],[178,19,173,21],[178,21,173,23,"status"],[178,27,173,29],[178,28,173,30],[179,4,174,4],[179,5,174,5],[180,4,175,4],[180,10,175,10,"unloadForSound"],[180,24,175,24,"unloadForSound"],[180,25,175,25,"element"],[180,32,175,32],[180,34,175,34],[181,6,176,8,"element"],[181,13,176,15],[181,14,176,16,"pause"],[181,19,176,21],[181,20,176,22],[181,21,176,23],[182,6,177,8,"element"],[182,13,177,15],[182,14,177,16,"removeAttribute"],[182,29,177,31],[182,30,177,32],[182,35,177,37],[182,36,177,38],[183,6,178,8,"element"],[183,13,178,15],[183,14,178,16,"load"],[183,18,178,20],[183,19,178,21],[183,20,178,22],[184,6,179,8],[184,13,179,15,"getStatusFromMedia"],[184,31,179,33],[184,32,179,34,"element"],[184,39,179,41],[184,40,179,42],[185,4,180,4],[185,5,180,5],[186,4,181,4],[186,10,181,10,"setStatusForSound"],[186,27,181,27,"setStatusForSound"],[186,28,181,28,"element"],[186,35,181,35],[186,37,181,37,"status"],[186,43,181,43],[186,45,181,45],[187,6,182,8],[187,13,182,15,"setStatusForMedia"],[187,30,182,32],[187,31,182,33,"element"],[187,38,182,40],[187,40,182,42,"status"],[187,46,182,48],[187,47,182,49],[188,4,183,4],[188,5,183,5],[189,4,184,4],[189,10,184,10,"replaySound"],[189,21,184,21,"replaySound"],[189,22,184,22,"element"],[189,29,184,29],[189,31,184,31,"status"],[189,37,184,37],[189,39,184,39],[190,6,185,8],[190,13,185,15,"setStatusForMedia"],[190,30,185,32],[190,31,185,33,"element"],[190,38,185,40],[190,40,185,42,"status"],[190,46,185,48],[190,47,185,49],[191,4,186,4],[191,5,186,5],[192,4,187,4],[193,4,188,4],[194,4,189,4],[194,10,189,10,"getAudioRecordingStatus"],[194,33,189,33,"getAudioRecordingStatus"],[194,34,189,33],[194,36,189,36],[195,6,190,8],[195,13,190,15],[196,8,191,12,"canRecord"],[196,17,191,21],[196,19,191,23,"mediaRecorder"],[196,32,191,36],[196,34,191,38,"state"],[196,39,191,43],[196,44,191,48],[196,55,191,59],[196,59,191,63,"mediaRecorder"],[196,72,191,76],[196,74,191,78,"state"],[196,79,191,83],[196,84,191,88],[196,94,191,98],[197,8,192,12,"isRecording"],[197,19,192,23],[197,21,192,25,"mediaRecorder"],[197,34,192,38],[197,36,192,40,"state"],[197,41,192,45],[197,46,192,50],[197,57,192,61],[198,8,193,12,"isDoneRecording"],[198,23,193,27],[198,25,193,29],[198,30,193,34],[199,8,194,12,"durationMillis"],[199,22,194,26],[199,24,194,28,"getAudioRecorderDurationMillis"],[199,54,194,58],[199,55,194,59],[199,56,194,60],[200,8,195,12,"uri"],[200,11,195,15],[200,13,195,17],[201,6,196,8],[201,7,196,9],[202,4,197,4],[202,5,197,5],[203,4,198,4],[204,4,199,4],[204,10,199,10,"prepareAudioRecorder"],[204,30,199,30,"prepareAudioRecorder"],[204,31,199,31,"options"],[204,38,199,38],[204,40,199,40],[205,6,200,8],[205,10,200,12],[205,17,200,19,"navigator"],[205,26,200,28],[205,31,200,33],[205,42,200,44],[205,46,200,48],[205,47,200,49,"navigator"],[205,56,200,58],[205,57,200,59,"mediaDevices"],[205,69,200,71],[205,71,200,73],[206,8,201,12],[206,14,201,18],[206,18,201,22,"Error"],[206,23,201,27],[206,24,201,28],[206,52,201,56],[206,53,201,57],[207,6,202,8],[208,6,203,8,"mediaRecorderUptimeOfLastStartResume"],[208,42,203,44],[208,45,203,47],[208,46,203,48],[209,6,204,8,"mediaRecorderDurationAlreadyRecorded"],[209,42,204,44],[209,45,204,47],[209,46,204,48],[210,6,205,8],[210,12,205,14,"stream"],[210,18,205,20],[210,21,205,23],[210,27,205,29,"getUserMedia"],[210,39,205,41],[210,40,205,42],[211,8,205,44,"audio"],[211,13,205,49],[211,15,205,51],[212,6,205,56],[212,7,205,57],[212,8,205,58],[213,6,206,8,"mediaRecorder"],[213,19,206,21],[213,22,206,24],[213,26,206,28,"window"],[213,32,206,34],[213,33,206,35,"MediaRecorder"],[213,46,206,48],[213,47,206,49,"stream"],[213,53,206,55],[213,55,206,57,"options"],[213,62,206,64],[213,64,206,66,"web"],[213,67,206,69],[213,71,206,73,"RecordingOptionsPresets"],[213,114,206,96],[213,115,206,97,"HIGH_QUALITY"],[213,127,206,109],[213,128,206,110,"web"],[213,131,206,113],[213,132,206,114],[214,6,207,8,"mediaRecorder"],[214,19,207,21],[214,20,207,22,"addEventListener"],[214,36,207,38],[214,37,207,39],[214,44,207,46],[214,46,207,48],[214,52,207,54],[215,8,208,12,"mediaRecorderDurationAlreadyRecorded"],[215,44,208,48],[215,47,208,51,"getAudioRecorderDurationMillis"],[215,77,208,81],[215,78,208,82],[215,79,208,83],[216,8,209,12,"mediaRecorderIsRecording"],[216,32,209,36],[216,35,209,39],[216,40,209,44],[217,6,210,8],[217,7,210,9],[217,8,210,10],[218,6,211,8,"mediaRecorder"],[218,19,211,21],[218,20,211,22,"addEventListener"],[218,36,211,38],[218,37,211,39],[218,45,211,47],[218,47,211,49],[218,53,211,55],[219,8,212,12,"mediaRecorderUptimeOfLastStartResume"],[219,44,212,48],[219,47,212,51,"Date"],[219,51,212,55],[219,52,212,56,"now"],[219,55,212,59],[219,56,212,60],[219,57,212,61],[220,8,213,12,"mediaRecorderIsRecording"],[220,32,213,36],[220,35,213,39],[220,39,213,43],[221,6,214,8],[221,7,214,9],[221,8,214,10],[222,6,215,8,"mediaRecorder"],[222,19,215,21],[222,20,215,22,"addEventListener"],[222,36,215,38],[222,37,215,39],[222,44,215,46],[222,46,215,48],[222,52,215,54],[223,8,216,12,"mediaRecorderUptimeOfLastStartResume"],[223,44,216,48],[223,47,216,51,"Date"],[223,51,216,55],[223,52,216,56,"now"],[223,55,216,59],[223,56,216,60],[223,57,216,61],[224,8,217,12,"mediaRecorderDurationAlreadyRecorded"],[224,44,217,48],[224,47,217,51],[224,48,217,52],[225,8,218,12,"mediaRecorderIsRecording"],[225,32,218,36],[225,35,218,39],[225,39,218,43],[226,6,219,8],[226,7,219,9],[226,8,219,10],[227,6,220,8,"mediaRecorder"],[227,19,220,21],[227,20,220,22,"addEventListener"],[227,36,220,38],[227,37,220,39],[227,43,220,45],[227,45,220,47],[227,51,220,53],[228,8,221,12,"mediaRecorderDurationAlreadyRecorded"],[228,44,221,48],[228,47,221,51,"getAudioRecorderDurationMillis"],[228,77,221,81],[228,78,221,82],[228,79,221,83],[229,8,222,12,"mediaRecorderIsRecording"],[229,32,222,36],[229,35,222,39],[229,40,222,44],[230,8,223,12],[231,8,224,12,"stream"],[231,14,224,18],[231,15,224,19,"getTracks"],[231,24,224,28],[231,25,224,29],[231,26,224,30],[231,27,224,31,"forEach"],[231,34,224,38],[231,35,224,40,"track"],[231,40,224,45],[231,44,224,50,"track"],[231,49,224,55],[231,50,224,56,"stop"],[231,54,224,60],[231,55,224,61],[231,56,224,62],[231,57,224,63],[232,6,225,8],[232,7,225,9],[232,8,225,10],[233,6,226,8],[233,12,226,8,"_await$this$getAudioR"],[233,33,226,8],[233,36,226,35],[233,42,226,41],[233,46,226,45],[233,47,226,46,"getAudioRecordingStatus"],[233,70,226,69],[233,71,226,70],[233,72,226,71],[234,8,226,24,"status"],[234,14,226,30],[234,21,226,30,"_objectWithoutPropertiesLoose2"],[234,51,226,30],[234,52,226,30,"default"],[234,59,226,30],[234,61,226,30,"_await$this$getAudioR"],[234,82,226,30],[234,84,226,30,"_excluded"],[234,93,226,30],[235,6,227,8],[235,13,227,15],[236,8,227,17,"uri"],[236,11,227,20],[236,13,227,22],[236,17,227,26],[237,8,227,28,"status"],[238,6,227,35],[238,7,227,36],[239,4,228,4],[239,5,228,5],[240,4,229,4],[240,10,229,10,"startAudioRecording"],[240,29,229,29,"startAudioRecording"],[240,30,229,29],[240,32,229,32],[241,6,230,8],[241,10,230,12,"mediaRecorder"],[241,23,230,25],[241,28,230,30],[241,32,230,34],[241,34,230,36],[242,8,231,12],[242,14,231,18],[242,18,231,22,"Error"],[242,23,231,27],[242,24,231,28],[242,169,231,173],[242,170,231,174],[243,6,232,8],[244,6,233,8],[244,10,233,12,"mediaRecorder"],[244,23,233,25],[244,24,233,26,"state"],[244,29,233,31],[244,34,233,36],[244,42,233,44],[244,44,233,46],[245,8,234,12,"mediaRecorder"],[245,21,234,25],[245,22,234,26,"resume"],[245,28,234,32],[245,29,234,33],[245,30,234,34],[246,6,235,8],[246,7,235,9],[246,13,236,13],[247,8,237,12,"mediaRecorder"],[247,21,237,25],[247,22,237,26,"start"],[247,27,237,31],[247,28,237,32],[247,29,237,33],[248,6,238,8],[249,6,239,8],[249,13,239,15],[249,17,239,19],[249,18,239,20,"getAudioRecordingStatus"],[249,41,239,43],[249,42,239,44],[249,43,239,45],[250,4,240,4],[250,5,240,5],[251,4,241,4],[251,10,241,10,"pauseAudioRecording"],[251,29,241,29,"pauseAudioRecording"],[251,30,241,29],[251,32,241,32],[252,6,242,8],[252,10,242,12,"mediaRecorder"],[252,23,242,25],[252,28,242,30],[252,32,242,34],[252,34,242,36],[253,8,243,12],[253,14,243,18],[253,18,243,22,"Error"],[253,23,243,27],[253,24,243,28],[253,169,243,173],[253,170,243,174],[254,6,244,8],[255,6,245,8],[256,6,246,8,"mediaRecorder"],[256,19,246,21],[256,20,246,22,"pause"],[256,25,246,27],[256,26,246,28],[256,27,246,29],[257,6,247,8],[257,13,247,15],[257,17,247,19],[257,18,247,20,"getAudioRecordingStatus"],[257,41,247,43],[257,42,247,44],[257,43,247,45],[258,4,248,4],[258,5,248,5],[259,4,249,4],[259,10,249,10,"stopAudioRecording"],[259,28,249,28,"stopAudioRecording"],[259,29,249,28],[259,31,249,31],[260,6,250,8],[260,12,250,14,"_mediaRecorder"],[260,26,250,28],[260,29,250,31,"mediaRecorder"],[260,42,250,44],[261,6,251,8],[261,10,251,12,"_mediaRecorder"],[261,24,251,26],[261,29,251,31],[261,33,251,35],[261,35,251,37],[262,8,252,12],[262,14,252,18],[262,18,252,22,"Error"],[262,23,252,27],[262,24,252,28],[262,169,252,173],[262,170,252,174],[263,6,253,8],[264,6,254,8],[264,10,254,12,"_mediaRecorder"],[264,24,254,26],[264,25,254,27,"state"],[264,30,254,32],[264,35,254,37],[264,45,254,47],[264,47,254,49],[265,8,255,12],[265,15,255,19],[265,19,255,23],[265,20,255,24,"getAudioRecordingStatus"],[265,43,255,47],[265,44,255,48],[265,45,255,49],[266,6,256,8],[267,6,257,8],[267,12,257,14,"dataPromise"],[267,23,257,25],[267,26,257,28],[267,30,257,32,"Promise"],[267,37,257,39],[267,38,257,41,"resolve"],[267,45,257,48],[267,49,257,53,"_mediaRecorder"],[267,63,257,67],[267,64,257,68,"addEventListener"],[267,80,257,84],[267,81,257,85],[267,96,257,100],[267,98,257,103,"e"],[267,99,257,104],[267,103,257,109,"resolve"],[267,110,257,116],[267,111,257,117,"e"],[267,112,257,118],[267,113,257,119,"data"],[267,117,257,123],[267,118,257,124],[267,119,257,125],[267,120,257,126],[268,6,258,8,"_mediaRecorder"],[268,20,258,22],[268,21,258,23,"stop"],[268,25,258,27],[268,26,258,28],[268,27,258,29],[269,6,259,8],[269,12,259,14,"data"],[269,16,259,18],[269,19,259,21],[269,25,259,27,"dataPromise"],[269,36,259,38],[270,6,260,8],[270,12,260,14,"url"],[270,15,260,17],[270,18,260,20,"URL"],[270,21,260,23],[270,22,260,24,"createObjectURL"],[270,37,260,39],[270,38,260,40,"data"],[270,42,260,44],[270,43,260,45],[271,6,261,8],[271,13,261,8,"Object"],[271,19,261,8],[271,20,261,8,"assign"],[271,26,261,8],[271,31,262,16],[271,37,262,22],[271,41,262,26],[271,42,262,27,"getAudioRecordingStatus"],[271,65,262,50],[271,66,262,51],[271,67,262,52],[272,8,263,12,"uri"],[272,11,263,15],[272,13,263,17,"url"],[273,6,263,20],[274,4,265,4],[274,5,265,5],[275,4,266,4],[275,10,266,10,"unloadAudioRecorder"],[275,29,266,29,"unloadAudioRecorder"],[275,30,266,29],[275,32,266,32],[276,6,267,8,"mediaRecorder"],[276,19,267,21],[276,22,267,24],[276,26,267,28],[277,4,268,4],[277,5,268,5],[278,4,269,4],[278,10,269,10,"getPermissionsAsync"],[278,29,269,29,"getPermissionsAsync"],[278,30,269,29],[278,32,269,32],[279,6,270,8],[279,12,270,14,"maybeStatus"],[279,23,270,25],[279,26,270,28],[279,32,270,34,"getPermissionWithQueryAsync"],[279,59,270,61],[279,60,270,62],[279,72,270,74],[279,73,270,75],[280,6,271,8],[280,14,271,16,"maybeStatus"],[280,25,271,27],[281,8,272,12],[281,13,272,17,"PermissionStatus"],[281,46,272,33],[281,47,272,34,"GRANTED"],[281,54,272,41],[282,10,273,16],[282,17,273,23],[283,12,274,20,"status"],[283,18,274,26],[283,20,274,28,"PermissionStatus"],[283,53,274,44],[283,54,274,45,"GRANTED"],[283,61,274,52],[284,12,275,20,"expires"],[284,19,275,27],[284,21,275,29],[284,28,275,36],[285,12,276,20,"canAskAgain"],[285,23,276,31],[285,25,276,33],[285,29,276,37],[286,12,277,20,"granted"],[286,19,277,27],[286,21,277,29],[287,10,278,16],[287,11,278,17],[288,8,279,12],[288,13,279,17,"PermissionStatus"],[288,46,279,33],[288,47,279,34,"DENIED"],[288,53,279,40],[289,10,280,16],[289,17,280,23],[290,12,281,20,"status"],[290,18,281,26],[290,20,281,28,"PermissionStatus"],[290,53,281,44],[290,54,281,45,"DENIED"],[290,60,281,51],[291,12,282,20,"expires"],[291,19,282,27],[291,21,282,29],[291,28,282,36],[292,12,283,20,"canAskAgain"],[292,23,283,31],[292,25,283,33],[292,29,283,37],[293,12,284,20,"granted"],[293,19,284,27],[293,21,284,29],[294,10,285,16],[294,11,285,17],[295,8,286,12],[296,10,287,16],[296,17,287,23],[296,23,287,29],[296,27,287,33],[296,28,287,34,"requestPermissionsAsync"],[296,51,287,57],[296,52,287,58],[296,53,287,59],[297,6,288,8],[298,4,289,4],[298,5,289,5],[299,4,290,4],[299,10,290,10,"requestPermissionsAsync"],[299,33,290,33,"requestPermissionsAsync"],[299,34,290,33],[299,36,290,36],[300,6,291,8],[300,10,291,12],[301,8,292,12],[301,14,292,18,"stream"],[301,20,292,24],[301,23,292,27],[301,29,292,33,"getUserMedia"],[301,41,292,45],[301,42,292,46],[302,10,292,48,"audio"],[302,15,292,53],[302,17,292,55],[303,8,292,60],[303,9,292,61],[303,10,292,62],[304,8,293,12,"stream"],[304,14,293,18],[304,15,293,19,"getTracks"],[304,24,293,28],[304,25,293,29],[304,26,293,30],[304,27,293,31,"forEach"],[304,34,293,38],[304,35,293,40,"track"],[304,40,293,45],[304,44,293,50,"track"],[304,49,293,55],[304,50,293,56,"stop"],[304,54,293,60],[304,55,293,61],[304,56,293,62],[304,57,293,63],[305,8,294,12],[305,15,294,19],[306,10,295,16,"status"],[306,16,295,22],[306,18,295,24,"PermissionStatus"],[306,51,295,40],[306,52,295,41,"GRANTED"],[306,59,295,48],[307,10,296,16,"expires"],[307,17,296,23],[307,19,296,25],[307,26,296,32],[308,10,297,16,"canAskAgain"],[308,21,297,27],[308,23,297,29],[308,27,297,33],[309,10,298,16,"granted"],[309,17,298,23],[309,19,298,25],[310,8,299,12],[310,9,299,13],[311,6,300,8],[311,7,300,9],[311,8,301,8],[311,14,301,14],[312,8,302,12],[312,15,302,19],[313,10,303,16,"status"],[313,16,303,22],[313,18,303,24,"PermissionStatus"],[313,51,303,40],[313,52,303,41,"DENIED"],[313,58,303,47],[314,10,304,16,"expires"],[314,17,304,23],[314,19,304,25],[314,26,304,32],[315,10,305,16,"canAskAgain"],[315,21,305,27],[315,23,305,29],[315,27,305,33],[316,10,306,16,"granted"],[316,17,306,23],[316,19,306,25],[317,8,307,12],[317,9,307,13],[318,6,308,8],[319,4,309,4],[320,2,310,0],[320,3,310,1],[321,0,310,1],[321,3]],"functionMap":{"names":["<global>","getPermissionWithQueryAsync","getUserMedia","<anonymous>","Promise$argument_0","getStatusFromMedia","setStatusForMedia","getAudioRecorderDurationMillis","default.getStatusForVideo","default.loadForVideo","default.unloadForVideo","default.setStatusForVideo","default.replayVideo","default.setAudioMode","default.setAudioIsEnabled","default.getStatusForSound","default.loadForSound","media.ontimeupdate","media.onerror","default.unloadForSound","default.setStatusForSound","default.replaySound","default.getAudioRecordingStatus","default.prepareAudioRecorder","mediaRecorder.addEventListener$argument_1","stream.getTracks.forEach$argument_0","default.startAudioRecording","default.pauseAudioRecording","default.stopAudioRecording","_mediaRecorder.addEventListener$argument_1","default.unloadAudioRecorder","default.getPermissionsAsync","default.requestPermissionsAsync"],"mappings":"AAA;ACG;CDkB;AEC;QCa;SDK;uBEC;KFK;CFC;AKC;CLiC;AMC;CNwC;AOK;CPM;IQE;KRE;ISC;KTE;IUC;KVE;IWC;KXE;IYC;KZE;IaE,wBb;IcC,6Bd;IeC;KfE;IgBC;6BCG;SDK;wBEC;SFK;KhBG;ImBC;KnBK;IoBC;KpBE;IqBC;KrBE;IsBG;KtBQ;IuBE;gDCQ;SDG;iDCC;SDG;gDCC;SDI;+CCC;uCCI,uBD;SDC;KvBG;I0BC;K1BW;I2BC;K3BO;I4BC;wCxBQ,8DyB,sBzB,CwB;K5BQ;I8BC;K9BE;I+BC;K/BoB;IgCC;uCPG,uBO;KhCgB"}},"type":"js/module"}]}