{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./NotificationPresenterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":66,"index":123}}],"key":"rQtZyX3sy8kjP4i5FlEsYqvoBtc=","exportNames":["*"]}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":66,"index":190}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getPresentedNotificationsAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _NotificationPresenterModule = _interopRequireDefault(require(_dependencyMap[2], \"./NotificationPresenterModule\"));\n  var _mapNotificationResponse = require(_dependencyMap[3], \"./utils/mapNotificationResponse\");\n  /**\n   * Fetches information about all notifications present in the notification tray (Notification Center).\n   * > This method is not supported on Android below 6.0 (API level 23) â€“ on these devices it will resolve to an empty array.\n   * @return A Promise which resolves with a list of notifications ([`Notification`](#notification)) currently present in the notification tray (Notification Center).\n   * @header dismiss\n   */\n  async function getPresentedNotificationsAsync() {\n    if (!_NotificationPresenterModule.default.getPresentedNotificationsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Notifications', 'getPresentedNotificationsAsync');\n    }\n    return (await _NotificationPresenterModule.default.getPresentedNotificationsAsync()).map(notification => (0, _mapNotificationResponse.mapNotification)(notification));\n  }\n});","lineCount":22,"map":[[7,2,1,0],[7,6,1,0,"_expoModulesCore"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,2,0],[8,6,2,0,"_NotificationPresenterModule"],[8,34,2,0],[8,37,2,0,"_interopRequireDefault"],[8,59,2,0],[8,60,2,0,"require"],[8,67,2,0],[8,68,2,0,"_dependencyMap"],[8,82,2,0],[9,2,3,0],[9,6,3,0,"_mapNotificationResponse"],[9,30,3,0],[9,33,3,0,"require"],[9,40,3,0],[9,41,3,0,"_dependencyMap"],[9,55,3,0],[10,2,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,2,10,15],[16,17,10,30,"getPresentedNotificationsAsync"],[16,47,10,60,"getPresentedNotificationsAsync"],[16,48,10,60],[16,50,10,63],[17,4,11,4],[17,8,11,8],[17,9,11,9,"NotificationPresenter"],[17,45,11,30],[17,46,11,31,"getPresentedNotificationsAsync"],[17,76,11,61],[17,78,11,63],[18,6,12,8],[18,12,12,14],[18,16,12,18,"UnavailabilityError"],[18,52,12,37],[18,53,12,38],[18,68,12,53],[18,70,12,55],[18,102,12,87],[18,103,12,88],[19,4,13,4],[20,4,14,4],[20,11,14,11],[20,12,14,12],[20,18,14,18,"NotificationPresenter"],[20,54,14,39],[20,55,14,40,"getPresentedNotificationsAsync"],[20,85,14,70],[20,86,14,71],[20,87,14,72],[20,89,14,74,"map"],[20,92,14,77],[20,93,14,79,"notification"],[20,105,14,91],[20,109,14,96],[20,113,14,96,"mapNotification"],[20,153,14,111],[20,155,14,112,"notification"],[20,167,14,124],[20,168,14,125],[20,169,14,126],[21,2,15,0],[22,0,15,1],[22,3]],"functionMap":{"names":["<global>","getPresentedNotificationsAsync","map$argument_0"],"mappings":"AAA;eCS;8ECI,+CD;CDC"}},"type":"js/module"}]}