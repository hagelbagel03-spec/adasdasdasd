{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./BadgeModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":40,"index":107}}],"key":"r7fk+7ZxSOstJNjSYSB8oukiur0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = setBadgeCountAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _BadgeModule = _interopRequireDefault(require(_dependencyMap[2], \"./BadgeModule\"));\n  /**\n   * Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested\n   * the user's permission for `allowBadge` via [`requestPermissionsAsync`](#requestpermissionsasyncpermissions),\n   * otherwise it will automatically return `false`.\n   * > **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.\n   * @param badgeCount The count which should appear on the badge. A value of `0` will clear the badge.\n   * @param options An object of options configuring behavior applied.\n   * @return It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.\n   * @header badge\n   */\n  async function setBadgeCountAsync(badgeCount, options) {\n    if (!_BadgeModule.default.setBadgeCountAsync) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n    }\n    const platformOptions = options?.[_expoModulesCore.Platform.OS];\n    return await _BadgeModule.default.setBadgeCountAsync(badgeCount, platformOptions);\n  }\n});","lineCount":26,"map":[[7,2,1,0],[7,6,1,0,"_expoModulesCore"],[7,22,1,0],[7,25,1,0,"require"],[7,32,1,0],[7,33,1,0,"_dependencyMap"],[7,47,1,0],[8,2,2,0],[8,6,2,0,"_BadgeModule"],[8,18,2,0],[8,21,2,0,"_interopRequireDefault"],[8,43,2,0],[8,44,2,0,"require"],[8,51,2,0],[8,52,2,0,"_dependencyMap"],[8,66,2,0],[9,2,3,0],[10,0,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,2,13,15],[19,17,13,30,"setBadgeCountAsync"],[19,35,13,48,"setBadgeCountAsync"],[19,36,13,49,"badgeCount"],[19,46,13,59],[19,48,13,61,"options"],[19,55,13,68],[19,57,13,70],[20,4,14,4],[20,8,14,8],[20,9,14,9,"BadgeModule"],[20,29,14,20],[20,30,14,21,"setBadgeCountAsync"],[20,48,14,39],[20,50,14,41],[21,6,15,8],[21,12,15,14],[21,16,15,18,"UnavailabilityError"],[21,52,15,37],[21,53,15,38],[21,72,15,57],[21,74,15,59],[21,94,15,79],[21,95,15,80],[22,4,16,4],[23,4,17,4],[23,10,17,10,"platformOptions"],[23,25,17,25],[23,28,17,28,"options"],[23,35,17,35],[23,38,17,38,"Platform"],[23,63,17,46],[23,64,17,47,"OS"],[23,66,17,49],[23,67,17,50],[24,4,18,4],[24,11,18,11],[24,17,18,17,"BadgeModule"],[24,37,18,28],[24,38,18,29,"setBadgeCountAsync"],[24,56,18,47],[24,57,18,48,"badgeCount"],[24,67,18,58],[24,69,18,60,"platformOptions"],[24,84,18,75],[24,85,18,76],[25,2,19,0],[26,0,19,1],[26,3]],"functionMap":{"names":["<global>","setBadgeCountAsync"],"mappings":"AAA;eCY;CDM"}},"type":"js/module"}]}