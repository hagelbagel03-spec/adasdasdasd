{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"]}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_ACTION_IDENTIFIER = void 0;\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _NotificationsEmitterModule = _interopRequireDefault(require(_dependencyMap[2], \"./NotificationsEmitterModule\"));\n  var _mapNotificationResponse = require(_dependencyMap[3], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  const emitter = new _expoModulesCore.LegacyEventEmitter(_NotificationsEmitterModule.default);\n  const didReceiveNotificationEventName = 'onDidReceiveNotification';\n  const didDropNotificationsEventName = 'onNotificationsDeleted';\n  const didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  const didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  const DEFAULT_ACTION_IDENTIFIER = exports.DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      const mappedNotification = (0, _mapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      const mappedResponse = (0, _mapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   *\n   * Gets the notification response received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   *\n   * @deprecated Use `getLastNotificationResponse` instead.\n   */\n  async function getLastNotificationResponseAsync() {\n    return getLastNotificationResponse();\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    const response = _NotificationsEmitterModule.default.getLastNotificationResponse();\n    const mappedResponse = response ? (0, _mapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @deprecated Use `clearLastNotificationResponse` instead.\n   * @return A promise that resolves if the native call was successful.\n   */\n  async function clearLastNotificationResponseAsync() {\n    clearLastNotificationResponse();\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function clearLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    _NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":164,"map":[[15,2,1,0],[15,6,1,0,"_expoModulesCore"],[15,22,1,0],[15,25,1,0,"require"],[15,32,1,0],[15,33,1,0,"_dependencyMap"],[15,47,1,0],[16,2,2,0],[16,6,2,0,"_NotificationsEmitterModule"],[16,33,2,0],[16,36,2,0,"_interopRequireDefault"],[16,58,2,0],[16,59,2,0,"require"],[16,66,2,0],[16,67,2,0,"_dependencyMap"],[16,81,2,0],[17,2,3,0],[17,6,3,0,"_mapNotificationResponse"],[17,30,3,0],[17,33,3,0,"require"],[17,40,3,0],[17,41,3,0,"_dependencyMap"],[17,55,3,0],[18,2,4,0],[19,2,5,0],[19,8,5,6,"emitter"],[19,15,5,13],[19,18,5,16],[19,22,5,20,"LegacyEventEmitter"],[19,57,5,38],[19,58,5,39,"NotificationsEmitterModule"],[19,93,5,65],[19,94,5,66],[20,2,6,0],[20,8,6,6,"didReceiveNotificationEventName"],[20,39,6,37],[20,42,6,40],[20,68,6,66],[21,2,7,0],[21,8,7,6,"didDropNotificationsEventName"],[21,37,7,35],[21,40,7,38],[21,64,7,62],[22,2,8,0],[22,8,8,6,"didReceiveNotificationResponseEventName"],[22,47,8,45],[22,50,8,48],[22,84,8,82],[23,2,9,0],[23,8,9,6,"didClearNotificationResponseEventName"],[23,45,9,43],[23,48,9,46],[23,80,9,78],[24,2,10,0],[25,2,11,7],[25,8,11,13,"DEFAULT_ACTION_IDENTIFIER"],[25,33,11,38],[25,36,11,38,"exports"],[25,43,11,38],[25,44,11,38,"DEFAULT_ACTION_IDENTIFIER"],[25,69,11,38],[25,72,11,41],[25,116,11,85],[26,2,12,0],[27,0,13,0],[28,0,14,0],[29,0,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,0,24,0],[39,0,25,0],[40,0,26,0],[41,0,27,0],[42,0,28,0],[43,0,29,0],[44,0,30,0],[45,0,31,0],[46,0,32,0],[47,0,33,0],[48,0,34,0],[49,0,35,0],[50,2,36,7],[50,11,36,16,"addNotificationReceivedListener"],[50,42,36,47,"addNotificationReceivedListener"],[50,43,36,48,"listener"],[50,51,36,56],[50,53,36,58],[51,4,37,4],[51,11,37,11,"emitter"],[51,18,37,18],[51,19,37,19,"addListener"],[51,30,37,30],[51,31,37,31,"didReceiveNotificationEventName"],[51,62,37,62],[51,64,37,65,"notification"],[51,76,37,77],[51,80,37,82],[52,6,38,8],[52,12,38,14,"mappedNotification"],[52,30,38,32],[52,33,38,35],[52,37,38,35,"mapNotification"],[52,77,38,50],[52,79,38,51,"notification"],[52,91,38,63],[52,92,38,64],[53,6,39,8,"listener"],[53,14,39,16],[53,15,39,17,"mappedNotification"],[53,33,39,35],[53,34,39,36],[54,4,40,4],[54,5,40,5],[54,6,40,6],[55,2,41,0],[56,2,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,0,48,0],[63,0,49,0],[64,2,50,7],[64,11,50,16,"addNotificationsDroppedListener"],[64,42,50,47,"addNotificationsDroppedListener"],[64,43,50,48,"listener"],[64,51,50,56],[64,53,50,58],[65,4,51,4],[65,11,51,11,"emitter"],[65,18,51,18],[65,19,51,19,"addListener"],[65,30,51,30],[65,31,51,31,"didDropNotificationsEventName"],[65,60,51,60],[65,62,51,62,"listener"],[65,70,51,70],[65,71,51,71],[66,2,52,0],[67,2,53,0],[68,0,54,0],[69,0,55,0],[70,0,56,0],[71,0,57,0],[72,0,58,0],[73,0,59,0],[74,0,60,0],[75,0,61,0],[76,0,62,0],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,0,66,0],[81,0,67,0],[82,0,68,0],[83,0,69,0],[84,0,70,0],[85,0,71,0],[86,0,72,0],[87,0,73,0],[88,0,74,0],[89,0,75,0],[90,0,76,0],[91,0,77,0],[92,0,78,0],[93,2,79,7],[93,11,79,16,"addNotificationResponseReceivedListener"],[93,50,79,55,"addNotificationResponseReceivedListener"],[93,51,79,56,"listener"],[93,59,79,64],[93,61,79,66],[94,4,80,4],[94,11,80,11,"emitter"],[94,18,80,18],[94,19,80,19,"addListener"],[94,30,80,30],[94,31,80,31,"didReceiveNotificationResponseEventName"],[94,70,80,70],[94,72,80,73,"response"],[94,80,80,81],[94,84,80,86],[95,6,81,8],[95,12,81,14,"mappedResponse"],[95,26,81,28],[95,29,81,31],[95,33,81,31,"mapNotificationResponse"],[95,81,81,54],[95,83,81,55,"response"],[95,91,81,63],[95,92,81,64],[96,6,82,8,"listener"],[96,14,82,16],[96,15,82,17,"mappedResponse"],[96,29,82,31],[96,30,82,32],[97,4,83,4],[97,5,83,5],[97,6,83,6],[98,2,84,0],[99,2,85,0],[100,0,86,0],[101,0,87,0],[102,0,88,0],[103,0,89,0],[104,0,90,0],[105,0,91,0],[106,0,92,0],[107,0,93,0],[108,0,94,0],[109,2,95,7],[109,17,95,22,"getLastNotificationResponseAsync"],[109,49,95,54,"getLastNotificationResponseAsync"],[109,50,95,54],[109,52,95,57],[110,4,96,4],[110,11,96,11,"getLastNotificationResponse"],[110,38,96,38],[110,39,96,39],[110,40,96,40],[111,2,97,0],[112,2,98,0],[113,0,99,0],[114,0,100,0],[115,0,101,0],[116,0,102,0],[117,0,103,0],[118,0,104,0],[119,2,105,7],[119,11,105,16,"getLastNotificationResponse"],[119,38,105,43,"getLastNotificationResponse"],[119,39,105,43],[119,41,105,46],[120,4,106,4],[120,8,106,8],[120,9,106,9,"NotificationsEmitterModule"],[120,44,106,35],[120,45,106,36,"getLastNotificationResponse"],[120,72,106,63],[120,74,106,65],[121,6,107,8],[121,12,107,14],[121,16,107,18,"UnavailabilityError"],[121,52,107,37],[121,53,107,38],[121,72,107,57],[121,74,107,59],[121,103,107,88],[121,104,107,89],[122,4,108,4],[123,4,109,4],[123,10,109,10,"response"],[123,18,109,18],[123,21,109,21,"NotificationsEmitterModule"],[123,56,109,47],[123,57,109,48,"getLastNotificationResponse"],[123,84,109,75],[123,85,109,76],[123,86,109,77],[124,4,110,4],[124,10,110,10,"mappedResponse"],[124,24,110,24],[124,27,110,27,"response"],[124,35,110,35],[124,38,110,38],[124,42,110,38,"mapNotificationResponse"],[124,90,110,61],[124,92,110,62,"response"],[124,100,110,70],[124,101,110,71],[124,104,110,74,"response"],[124,112,110,82],[125,4,111,4],[125,11,111,11,"mappedResponse"],[125,25,111,25],[126,2,112,0],[127,2,113,0],[128,0,114,0],[129,0,115,0],[130,0,116,0],[131,0,117,0],[132,0,118,0],[133,0,119,0],[134,0,120,0],[135,0,121,0],[136,0,122,0],[137,0,123,0],[138,2,124,7],[138,17,124,22,"clearLastNotificationResponseAsync"],[138,51,124,56,"clearLastNotificationResponseAsync"],[138,52,124,56],[138,54,124,59],[139,4,125,4,"clearLastNotificationResponse"],[139,33,125,33],[139,34,125,34],[139,35,125,35],[140,2,126,0],[141,2,127,0],[142,0,128,0],[143,0,129,0],[144,0,130,0],[145,0,131,0],[146,0,132,0],[147,0,133,0],[148,0,134,0],[149,0,135,0],[150,2,136,7],[150,11,136,16,"clearLastNotificationResponse"],[150,40,136,45,"clearLastNotificationResponse"],[150,41,136,45],[150,43,136,48],[151,4,137,4],[151,8,137,8],[151,9,137,9,"NotificationsEmitterModule"],[151,44,137,35],[151,45,137,36,"clearLastNotificationResponse"],[151,74,137,65],[151,76,137,67],[152,6,138,8],[152,12,138,14],[152,16,138,18,"UnavailabilityError"],[152,52,138,37],[152,53,138,38],[152,72,138,57],[152,74,138,59],[152,105,138,90],[152,106,138,91],[153,4,139,4],[154,4,140,4,"NotificationsEmitterModule"],[154,39,140,30],[154,40,140,31,"clearLastNotificationResponse"],[154,69,140,60],[154,70,140,61],[154,71,140,62],[155,4,141,4],[156,4,142,4,"emitter"],[156,11,142,11],[156,12,142,12,"emit"],[156,16,142,16],[156,17,142,17,"didClearNotificationResponseEventName"],[156,54,142,54],[156,56,142,56],[156,58,142,58],[156,59,142,59],[157,2,143,0],[158,2,144,0],[159,0,145,0],[160,0,146,0],[161,2,147,7],[161,11,147,16,"addNotificationResponseClearedListener"],[161,49,147,54,"addNotificationResponseClearedListener"],[161,50,147,55,"listener"],[161,58,147,63],[161,60,147,65],[162,4,148,4],[162,11,148,11,"emitter"],[162,18,148,18],[162,19,148,19,"addListener"],[162,30,148,30],[162,31,148,31,"didClearNotificationResponseEventName"],[162,68,148,68],[162,70,148,70,"listener"],[162,78,148,78],[162,79,148,79],[163,2,149,0],[164,0,149,1],[164,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKW;CLE;OMQ;CNO;OOY;CPE;OQU;CRO;OSI;CTE"}},"type":"js/module"}]}